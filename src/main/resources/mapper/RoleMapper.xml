<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.iris.hamster.mapper.RoleMapper">

    <resultMap id="BaseResultMap" type="cn.iris.hamster.bean.pojo.Role">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="key" column="key" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="CHAR"/>
        <result property="createBy" column="create_by" jdbcType="BIGINT"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="BIGINT"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,name,key,
        status,create_by,create_time,
        update_by,update_time,remark
    </sql>

    <insert id="insertR_P">
        insert into role_permission(rid, pid, `status`) values
        <foreach collection="pids" item="pid" index="index" open="" close="" separator=",">
            (#{rid}, #{pid}, ${@cn.iris.hamster.common.constants.CommonConstants@STATUS_ENABLE})
        </foreach>
    </insert>

    <update id="changeStatus">
        update user_role
        set `status` = #{status}
        where rid = #{rid}
    </update>

    <update id="updateAdminPerms">
        insert into role_permission(rid, pid, `status`) value (1, #{pid}, #{status})
    </update>

    <delete id="deleteR_P">
        delete
        from role_permission
        where rid = #{rid}
    </delete>

    <select id="getRolesByUid" resultType="cn.iris.hamster.bean.pojo.Role">
        select distinct r.id,
                        r.`name`,
                        r.r_key,
                        r.`status`,
                        r.create_by,
                        r.create_time,
                        r.update_by,
                        r.update_time,
                        r.remark
        from `role` r
                 left join user_role ur on ur.rid = r.id
        where r.status = '0'
          and ur.status = '0'
          and ur.uid = #{uid}
    </select>

    <select id="isKeyExist" resultType="java.lang.Integer">
        select count(*)
        from `role`
        where r_key = #{key}
    </select>

    <select id="listByLimit" resultType="cn.iris.hamster.bean.vo.RoleVo">
        select distinct r.id as `id`,
        r.name as `name`,
        r.r_key as r_key,
        r.status as `status`,
        u1.name as creat_by,
        r.create_time as create_time,
        u2.name as update_by,
        r.update_time as update_time,
        r.remark as remark
        from `role` r
        left join `user` u1 on r.create_by = u1.id
        left join `user` u2 on r.update_by = u2.id
        left join role_permission rp on rp.rid = r.id
        <where>
            <if test="query.keyword != null and query.keyword != ''">
                and r.name like concat('%', #{query.keyword} ,'%')
                or r.r_key like concat('%', #{query.keyword}, '%')
            </if>
            <if test='query.status == "0" or query.status == "1"'>
                and r.status = #{query.status}
            </if>
        </where>
        order by r.id
        limit #{start}, #{query.size}
    </select>

    <select id="getCountByLimit" resultType="java.lang.Integer">
        select count(*) from `role`
        <where>
            <if test="query.keyword != null and query.keyword != ''">
                and `name` like concat('%', #{query.keyword} ,'%')
                or r_key like concat('%', #{query.keyword}, '%')
            </if>
            <if test='query.status == "0" or query.status == "1"'>
                and `status` = #{query.status}
            </if>
        </where>
    </select>
</mapper>
